{"version":3,"sources":["components/Checkmark.jsx","components/HealthcareRegistrationForm.jsx","App.js","serviceWorker.js","index.js"],"names":["Checkmark","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","animating","react_default","a","createElement","className","xmlns","viewBox","cx","cy","r","fill","d","React","Component","HealthcareRegistrationForm","state","fields","errors","submissionSuccessful","handleChange","bind","assertThisInitialized","submitHealthRegistrationForm","sessionStorageValues","JSON","parse","window","sessionStorage","getItem","setState","npi","tmp","sum","i","j","length","indexOf","charCodeAt","e","target","name","value","justFields","setItem","stringify","preventDefault","validateForm","fullName","npiNumber","businessAddress","phoneNumber","email","emailConfirm","formIsValid","pattern","RegExp","test","luhnValidate","match","components","id","components_Checkmark","method","onSubmit","htmlFor","type","placeholder","onChange","hidden","App","Body","components_HealthcareRegistrationForm","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4QAiCeA,cA9Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,UAAYR,EAAMQ,UAHNP,wEAOjB,OACEQ,EAAAC,EAAAC,cAAA,OACEC,UAAWR,KAAKJ,MAAMQ,UAAY,sBAAwB,YAC1DK,MAAM,6BACNC,QAAQ,aAERL,EAAAC,EAAAC,cAAA,UACEC,UAAU,oBACVG,GAAG,KACHC,GAAG,KACHC,EAAE,KACFC,KAAK,SAEPT,EAAAC,EAAAC,cAAA,QACEC,UAAU,mBACVM,KAAK,OACLC,EAAE,yCAxBYC,IAAMC,WC8UfC,cA3Ub,SAAAA,IAAc,IAAArB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkB,IACZrB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoB,GAAAf,KAAAH,QAEKmB,MAAQ,CACXC,OAAQ,GACRC,OAAQ,GACRC,sBAAsB,GAGxBzB,EAAK0B,aAAe1B,EAAK0B,aAAaC,KAAlB1B,OAAA2B,EAAA,EAAA3B,CAAAD,IACpBA,EAAK6B,6BAA+B7B,EAAK6B,6BAA6BF,KAAlC1B,OAAA2B,EAAA,EAAA3B,CAAAD,IAVxBA,mFAiBZ,IAAM8B,EAAuBC,KAAKC,MAChCC,OAAOC,eAAeC,QAAQ,gBAE5BL,GACF3B,KAAKiC,SAASN,wCAILO,GACX,IAAIC,EAAKC,EAAKC,EAAGC,EAEjB,GAAU,MADVD,EAAIH,EAAIK,SACuC,IAA/BL,EAAIM,QAAQ,QAAS,EAAG,GAAUJ,EAAM,MACnD,IAAU,KAANC,EACJ,OAAO,EADOD,EAAM,GAGzB,IADAE,EAAI,EACS,IAAND,GACLF,EAAMD,EAAIO,WAAWJ,EAAI,GAAK,IAAII,WAAW,GACzCH,IAAM,IAAM,IACTH,IAAQ,GAAK,IAChBA,GAAO,GACPA,KAGJC,GAAOD,EACPE,IAEF,OAAID,EAAM,KAAO,uCAINM,GACX,IAAItB,EAASpB,KAAKmB,MAAMC,OACxBA,EAAOsB,EAAEC,OAAOC,MAAQF,EAAEC,OAAOE,MACjC7C,KAAKiC,SAAS,CACZb,WAEF,IAAI0B,EAAa,CAAE1B,UACnBU,OAAOC,eAAegB,QAAQ,cAAenB,KAAKoB,UAAUF,yDAGjCJ,GAE3B,GADAA,EAAEO,iBACEjD,KAAKkD,eAAgB,CASvBlD,KAAKiC,SAAS,CAAEX,sBAAsB,EAAMF,OAR/B,CACX+B,SAAU,GACVC,UAAW,GACXC,gBAAiB,GACjBC,YAAa,GACbC,MAAO,GACPC,aAAc,8CAOlB,IAAIpC,EAASpB,KAAKmB,MAAMC,OACpBC,EAAS,GACToC,GAAc,EAiBlB,GAfKrC,EAAM,WACTqC,GAAc,EACdpC,EAAM,SAAe,gCAGlBD,EAAM,QACTqC,GAAc,EACdpC,EAAM,MAAY,oCAGfD,EAAM,kBACTqC,GAAc,EACdpC,EAAM,gBAAsB,uCAID,qBAApBD,EAAM,OACqB,qBAA3BA,EAAM,aACb,CAEA,IAAIsC,EAAU,IAAIC,OAChB,mSAEGD,EAAQE,KAAKxC,EAAM,SACtBqC,GAAc,EACdpC,EAAM,MAAY,+BAGfqC,EAAQE,KAAKxC,EAAM,gBACtBqC,GAAc,EACdpC,EAAM,aAAmB,+BAGvBD,EAAM,QAAcA,EAAM,eAC5BC,EAAM,aAAmB,8BAgC7B,OA5BKD,EAAM,YACTqC,GAAc,EACdpC,EAAM,UAAgB,iCAGW,qBAAxBD,EAAM,YACVpB,KAAK6D,aAAazC,EAAM,aAC3BqC,GAAc,EACdpC,EAAM,UAAgB,qCAIrBD,EAAM,cACTqC,GAAc,EACdpC,EAAM,YAAkB,mCAGW,qBAA1BD,EAAM,cACVA,EAAM,YAAgB0C,MAAM,iBAC/BL,GAAc,EACdpC,EAAM,YAAkB,uCAI5BrB,KAAKiC,SAAS,CACZZ,OAAQA,IAEVS,OAAOC,eAAegB,QAAQ,cAAe,MACtCU,mCAIP,OACEpD,EAAAC,EAAAC,cAACwD,EAAA,QAAD,KACE1D,EAAAC,EAAAC,cAACwD,EAAA,UAAD,CAAWC,GAAG,YACZ3D,EAAAC,EAAAC,cAAA,OACEC,UACER,KAAKmB,MAAMG,qBACP,gCACA,aAGNjB,EAAAC,EAAAC,cAAC0D,EAAD,CAAW7D,UAAWJ,KAAKmB,MAAMG,uBACjCjB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAAb,sGAKFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BAEjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,QACEC,UAAU,uCACV0D,OAAO,OACPC,SAAUnE,KAAK0B,8BAEfrB,EAAAC,EAAAC,cAACwD,EAAA,QAAD,KACE1D,EAAAC,EAAAC,cAACwD,EAAA,MAAD,KACE1D,EAAAC,EAAAC,cAAA,SAAOC,UAAU,sBAAsB4D,QAAQ,SAA/C,SAGA/D,EAAAC,EAAAC,cAACwD,EAAA,QAAD,KACE1D,EAAAC,EAAAC,cAACwD,EAAA,MAAD,CACEC,GAAG,QACHpB,KAAK,QACLyB,KAAK,QACLC,YAAY,QACZzB,MAAO7C,KAAKmB,MAAMC,OAAOmC,OAAS,GAClCgB,SAAUvE,KAAKuB,eAEjBlB,EAAAC,EAAAC,cAAA,KACEC,UAAU,kBACVgE,QAASxE,KAAKmB,MAAME,OAAOkC,OAE1BvD,KAAKmB,MAAME,OAAOkC,SAIzBlD,EAAAC,EAAAC,cAACwD,EAAA,MAAD,KACE1D,EAAAC,EAAAC,cAAA,SACEC,UAAU,sBACV4D,QAAQ,iBAFV,mBAMA/D,EAAAC,EAAAC,cAACwD,EAAA,QAAD,KACE1D,EAAAC,EAAAC,cAACwD,EAAA,MAAD,CACEC,GAAG,gBACHpB,KAAK,eACLyB,KAAK,QACLC,YAAY,kBACZzB,MAAO7C,KAAKmB,MAAMC,OAAOoC,cAAgB,GACzCe,SAAUvE,KAAKuB,eAEjBlB,EAAAC,EAAAC,cAAA,KACEC,UAAU,kBACVgE,QAASxE,KAAKmB,MAAME,OAAOmC,cAE1BxD,KAAKmB,MAAME,OAAOmC,gBAIzBnD,EAAAC,EAAAC,cAACwD,EAAA,MAAD,KACE1D,EAAAC,EAAAC,cAAA,SACEC,UAAU,sBACV4D,QAAQ,aAFV,aAMA/D,EAAAC,EAAAC,cAACwD,EAAA,QAAD,KACE1D,EAAAC,EAAAC,cAACwD,EAAA,MAAD,CACEC,GAAG,YACHpB,KAAK,WACL0B,YAAY,YACZzB,MAAO7C,KAAKmB,MAAMC,OAAO+B,UAAY,GACrCoB,SAAUvE,KAAKuB,eAEjBlB,EAAAC,EAAAC,cAAA,KACEC,UAAU,kBACVgE,QAASxE,KAAKmB,MAAME,OAAO8B,UAE1BnD,KAAKmB,MAAME,OAAO8B,YAIzB9C,EAAAC,EAAAC,cAACwD,EAAA,MAAD,KACE1D,EAAAC,EAAAC,cAAA,SACEC,UAAU,sBACV4D,QAAQ,cAFV,cAMA/D,EAAAC,EAAAC,cAACwD,EAAA,QAAD,KACE1D,EAAAC,EAAAC,cAACwD,EAAA,MAAD,CACEC,GAAG,aACHpB,KAAK,YACL0B,YAAY,aACZzB,MAAO7C,KAAKmB,MAAMC,OAAOgC,WAAa,GACtCmB,SAAUvE,KAAKuB,eAEjBlB,EAAAC,EAAAC,cAAA,KACEC,UAAU,kBACVgE,QAASxE,KAAKmB,MAAME,OAAO+B,WAE1BpD,KAAKmB,MAAME,OAAO+B,aAIzB/C,EAAAC,EAAAC,cAACwD,EAAA,MAAD,KACE1D,EAAAC,EAAAC,cAAA,SACEC,UAAU,sBACV4D,QAAQ,oBAFV,oBAMA/D,EAAAC,EAAAC,cAACwD,EAAA,QAAD,KACE1D,EAAAC,EAAAC,cAACwD,EAAA,MAAD,CACEC,GAAG,mBACHpB,KAAK,kBACL0B,YAAY,mBACZzB,MAAO7C,KAAKmB,MAAMC,OAAOiC,iBAAmB,GAC5CkB,SAAUvE,KAAKuB,eAEjBlB,EAAAC,EAAAC,cAAA,KACEC,UAAU,kBACVgE,QAASxE,KAAKmB,MAAME,OAAOgC,iBAE1BrD,KAAKmB,MAAME,OAAOgC,mBAIzBhD,EAAAC,EAAAC,cAACwD,EAAA,MAAD,KACE1D,EAAAC,EAAAC,cAAA,SACEC,UAAU,sBACV4D,QAAQ,oBAFV,oBAMA/D,EAAAC,EAAAC,cAACwD,EAAA,QAAD,KACE1D,EAAAC,EAAAC,cAACwD,EAAA,MAAD,CACEC,GAAG,mBACHpB,KAAK,cACL0B,YAAY,mBACZzB,MAAO7C,KAAKmB,MAAMC,OAAOkC,aAAe,GACxCiB,SAAUvE,KAAKuB,eAEjBlB,EAAAC,EAAAC,cAAA,KACEC,UAAU,kBACVgE,QAASxE,KAAKmB,MAAME,OAAOiC,aAE1BtD,KAAKmB,MAAME,OAAOiC,eAIzBjD,EAAAC,EAAAC,cAACwD,EAAA,QAAD,KACE1D,EAAAC,EAAAC,cAACwD,EAAA,OAAD,CACEM,KAAK,SACL7D,UAAU,4BAFZ,yBA1TmBQ,IAAMC,iBCuBhCwD,MAtBf,WACE,OACEpE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACwD,EAAA,QAAD,KACE1D,EAAAC,EAAAC,cAACwD,EAAA,KAAD,KACE1D,EAAAC,EAAAC,cAACwD,EAAA,KAAKW,KAAN,CAAWlE,UAAU,kBACnBH,EAAAC,EAAAC,cAACwD,EAAA,UAAD,KACE1D,EAAAC,EAAAC,cAACwD,EAAA,MAAD,CAAOvD,UAAU,aAAjB,qCAGAH,EAAAC,EAAAC,cAACwD,EAAA,SAAD,gEAOR1D,EAAAC,EAAAC,cAACoE,EAAD,QCVcC,QACW,cAA7B9C,OAAO+C,SAASC,UAEe,UAA7BhD,OAAO+C,SAASC,UAEhBhD,OAAO+C,SAASC,SAAShB,MACvB,2DCZNiB,IAASC,OAAO3E,EAAAC,EAAAC,cAAC0E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f01e9996.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Checkmark extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.animating = props.animating;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <svg\r\n        className={this.props.animating ? \"checkmark animating\" : \"checkmark\"}\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 52 52\"\r\n      >\r\n        <circle\r\n          className=\"checkmark__circle\"\r\n          cx=\"26\"\r\n          cy=\"26\"\r\n          r=\"25\"\r\n          fill=\"none\"\r\n        />\r\n        <path\r\n          className=\"checkmark__check\"\r\n          fill=\"none\"\r\n          d=\"M14.1 27.2l7.1 7.2 16.7-16.8\"\r\n        />\r\n      </svg>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checkmark;\r\n","import React from \"react\";\r\nimport { Field, Section, Container, Control, Input, Button } from \"reactbulma\";\r\nimport Checkmark from \"./Checkmark\";\r\n\r\nclass HealthcareRegistrationForm extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      fields: {},\r\n      errors: {},\r\n      submissionSuccessful: false\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.submitHealthRegistrationForm = this.submitHealthRegistrationForm.bind(\r\n      this\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    // On a refresh, restore the items back to their previous state\r\n    const sessionStorageValues = JSON.parse(\r\n      window.sessionStorage.getItem(\"formContent\")\r\n    );\r\n    if (sessionStorageValues) {\r\n      this.setState(sessionStorageValues);\r\n    }\r\n  }\r\n\r\n  luhnValidate(npi) {\r\n    var tmp, sum, i, j;\r\n    i = npi.length;\r\n    if (i === 15 && npi.indexOf(\"80840\", 0, 5) === 0) sum = 0;\r\n    else if (i === 10) sum = 24;\r\n    else return false;\r\n    j = 0;\r\n    while (i !== 0) {\r\n      tmp = npi.charCodeAt(i - 1) - \"0\".charCodeAt(0);\r\n      if (j++ % 2 !== 0) {\r\n        if ((tmp <<= 1) > 9) {\r\n          tmp -= 10;\r\n          tmp++;\r\n        }\r\n      }\r\n      sum += tmp;\r\n      i--;\r\n    }\r\n    if (sum % 10 === 0) return true;\r\n    else return false;\r\n  }\r\n\r\n  handleChange(e) {\r\n    let fields = this.state.fields;\r\n    fields[e.target.name] = e.target.value;\r\n    this.setState({\r\n      fields\r\n    });\r\n    let justFields = { fields };\r\n    window.sessionStorage.setItem(\"formContent\", JSON.stringify(justFields));\r\n  }\r\n\r\n  submitHealthRegistrationForm(e) {\r\n    e.preventDefault();\r\n    if (this.validateForm()) {\r\n      let fields = {\r\n        fullName: \"\",\r\n        npiNumber: \"\",\r\n        businessAddress: \"\",\r\n        phoneNumber: \"\",\r\n        email: \"\",\r\n        emailConfirm: \"\"\r\n      };\r\n      this.setState({ submissionSuccessful: true, fields: fields });\r\n    }\r\n  }\r\n\r\n  validateForm() {\r\n    let fields = this.state.fields;\r\n    let errors = {};\r\n    let formIsValid = true;\r\n\r\n    if (!fields[\"fullName\"]) {\r\n      formIsValid = false;\r\n      errors[\"fullName\"] = \"Please enter your full name.\";\r\n    }\r\n\r\n    if (!fields[\"email\"]) {\r\n      formIsValid = false;\r\n      errors[\"email\"] = \"Please enter your email address.\";\r\n    }\r\n\r\n    if (!fields[\"businessAddress\"]) {\r\n      formIsValid = false;\r\n      errors[\"businessAddress\"] = \"Please enter your business address.\";\r\n    }\r\n\r\n    if (\r\n      typeof fields[\"email\"] !== \"undefined\" &&\r\n      typeof fields[\"emailConfirm\"] !== \"undefined\"\r\n    ) {\r\n      //regular expression for email validation\r\n      var pattern = new RegExp(\r\n        /^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i\r\n      );\r\n      if (!pattern.test(fields[\"email\"])) {\r\n        formIsValid = false;\r\n        errors[\"email\"] = \"Please enter a valid email.\";\r\n      }\r\n\r\n      if (!pattern.test(fields[\"emailConfirm\"])) {\r\n        formIsValid = false;\r\n        errors[\"emailConfirm\"] = \"Please enter a valid email.\";\r\n      }\r\n\r\n      if (fields[\"email\"] !== fields[\"emailConfirm\"]) {\r\n        errors[\"emailConfirm\"] = \"This email does not match.\";\r\n      }\r\n    }\r\n\r\n    if (!fields[\"npiNumber\"]) {\r\n      formIsValid = false;\r\n      errors[\"npiNumber\"] = \"Please enter your NPI Number.\";\r\n    }\r\n\r\n    if (typeof fields[\"npiNumber\"] !== \"undefined\") {\r\n      if (!this.luhnValidate(fields[\"npiNumber\"])) {\r\n        formIsValid = false;\r\n        errors[\"npiNumber\"] = \"Please enter a valid NPI number.\";\r\n      }\r\n    }\r\n\r\n    if (!fields[\"phoneNumber\"]) {\r\n      formIsValid = false;\r\n      errors[\"phoneNumber\"] = \"Please enter your phone number.\";\r\n    }\r\n\r\n    if (typeof fields[\"phoneNumber\"] !== \"undefined\") {\r\n      if (!fields[\"phoneNumber\"].match(/^[0-9]{10}$/)) {\r\n        formIsValid = false;\r\n        errors[\"phoneNumber\"] = \"Please enter a valid phone number.\";\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      errors: errors\r\n    });\r\n    window.sessionStorage.setItem(\"formContent\", \"{}\");\r\n    return formIsValid;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Section>\r\n        <Container id=\"register\">\r\n          <div\r\n            className={\r\n              this.state.submissionSuccessful\r\n                ? \"submission-overlay is-overlay\"\r\n                : \"is-hidden\"\r\n            }\r\n          >\r\n            <Checkmark animating={this.state.submissionSuccessful} />\r\n            <p className=\"has-text-centered\">\r\n              Your information was successfully submitted. You will receive an\r\n              email shortly with confirmation.\r\n            </p>\r\n          </div>\r\n          <div className=\"columns\">\r\n            <div className=\"column is-one-third is-fullheight\">\r\n              <div className=\"form-accent is-fullheight\" />\r\n            </div>\r\n            <div className=\"column is-two-thirds\">\r\n              <div className=\"columns\">\r\n                <form\r\n                  className=\"column is-half is-offset-one-quarter\"\r\n                  method=\"post\"\r\n                  onSubmit={this.submitHealthRegistrationForm}\r\n                >\r\n                  <Section>\r\n                    <Field>\r\n                      <label className=\"label has-text-left\" htmlFor=\"email\">\r\n                        Email\r\n                      </label>\r\n                      <Control>\r\n                        <Input\r\n                          id=\"email\"\r\n                          name=\"email\"\r\n                          type=\"email\"\r\n                          placeholder=\"Email\"\r\n                          value={this.state.fields.email || \"\"}\r\n                          onChange={this.handleChange}\r\n                        />\r\n                        <p\r\n                          className=\"has-text-danger\"\r\n                          hidden={!this.state.errors.email}\r\n                        >\r\n                          {this.state.errors.email}\r\n                        </p>\r\n                      </Control>\r\n                    </Field>\r\n                    <Field>\r\n                      <label\r\n                        className=\"label has-text-left\"\r\n                        htmlFor=\"email-confirm\"\r\n                      >\r\n                        Email (confirm)\r\n                      </label>\r\n                      <Control>\r\n                        <Input\r\n                          id=\"email-confirm\"\r\n                          name=\"emailConfirm\"\r\n                          type=\"email\"\r\n                          placeholder=\"Email (confirm)\"\r\n                          value={this.state.fields.emailConfirm || \"\"}\r\n                          onChange={this.handleChange}\r\n                        />\r\n                        <p\r\n                          className=\"has-text-danger\"\r\n                          hidden={!this.state.errors.emailConfirm}\r\n                        >\r\n                          {this.state.errors.emailConfirm}\r\n                        </p>\r\n                      </Control>\r\n                    </Field>\r\n                    <Field>\r\n                      <label\r\n                        className=\"label has-text-left\"\r\n                        htmlFor=\"full-name\"\r\n                      >\r\n                        Full Name\r\n                      </label>\r\n                      <Control>\r\n                        <Input\r\n                          id=\"full-name\"\r\n                          name=\"fullName\"\r\n                          placeholder=\"Full Name\"\r\n                          value={this.state.fields.fullName || \"\"}\r\n                          onChange={this.handleChange}\r\n                        />\r\n                        <p\r\n                          className=\"has-text-danger\"\r\n                          hidden={!this.state.errors.fullName}\r\n                        >\r\n                          {this.state.errors.fullName}\r\n                        </p>\r\n                      </Control>\r\n                    </Field>\r\n                    <Field>\r\n                      <label\r\n                        className=\"label has-text-left\"\r\n                        htmlFor=\"npi-number\"\r\n                      >\r\n                        NPI Number\r\n                      </label>\r\n                      <Control>\r\n                        <Input\r\n                          id=\"npi-number\"\r\n                          name=\"npiNumber\"\r\n                          placeholder=\"NPI Number\"\r\n                          value={this.state.fields.npiNumber || \"\"}\r\n                          onChange={this.handleChange}\r\n                        />\r\n                        <p\r\n                          className=\"has-text-danger\"\r\n                          hidden={!this.state.errors.npiNumber}\r\n                        >\r\n                          {this.state.errors.npiNumber}\r\n                        </p>\r\n                      </Control>\r\n                    </Field>\r\n                    <Field>\r\n                      <label\r\n                        className=\"label has-text-left\"\r\n                        htmlFor=\"business-address\"\r\n                      >\r\n                        Business Address\r\n                      </label>\r\n                      <Control>\r\n                        <Input\r\n                          id=\"business-address\"\r\n                          name=\"businessAddress\"\r\n                          placeholder=\"Business Address\"\r\n                          value={this.state.fields.businessAddress || \"\"}\r\n                          onChange={this.handleChange}\r\n                        />\r\n                        <p\r\n                          className=\"has-text-danger\"\r\n                          hidden={!this.state.errors.businessAddress}\r\n                        >\r\n                          {this.state.errors.businessAddress}\r\n                        </p>\r\n                      </Control>\r\n                    </Field>\r\n                    <Field>\r\n                      <label\r\n                        className=\"label has-text-left\"\r\n                        htmlFor=\"telephone-number\"\r\n                      >\r\n                        Telephone Number\r\n                      </label>\r\n                      <Control>\r\n                        <Input\r\n                          id=\"telephone-number\"\r\n                          name=\"phoneNumber\"\r\n                          placeholder=\"Telephone Number\"\r\n                          value={this.state.fields.phoneNumber || \"\"}\r\n                          onChange={this.handleChange}\r\n                        />\r\n                        <p\r\n                          className=\"has-text-danger\"\r\n                          hidden={!this.state.errors.phoneNumber}\r\n                        >\r\n                          {this.state.errors.phoneNumber}\r\n                        </p>\r\n                      </Control>\r\n                    </Field>\r\n                    <Control>\r\n                      <Button\r\n                        type=\"submit\"\r\n                        className=\"bg-orange has-text-white\"\r\n                      >\r\n                        Submit\r\n                      </Button>\r\n                    </Control>\r\n                  </Section>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Container>\r\n      </Section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HealthcareRegistrationForm;\r\n","import React from \"react\";\nimport HealthcareRegistrationForm from \"./components/HealthcareRegistrationForm\";\nimport { Hero, Container, Title, SubTitle, Section } from \"reactbulma\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Section>\n        <Hero>\n          <Hero.Body className=\"is-paddingless\">\n            <Container>\n              <Title className=\"is-bolder\">\n                Register your healthcare provider\n              </Title>\n              <SubTitle>\n                Please complete this form with accurate information\n              </SubTitle>\n            </Container>\n          </Hero.Body>\n        </Hero>\n      </Section>\n      <HealthcareRegistrationForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}